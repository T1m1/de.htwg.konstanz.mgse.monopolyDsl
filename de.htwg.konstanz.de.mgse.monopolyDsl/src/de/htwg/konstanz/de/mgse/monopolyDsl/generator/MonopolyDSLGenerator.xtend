/*
 * generated by Xtext 2.9.1
 */
package de.htwg.konstanz.de.mgse.monopolyDsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.htwg.konstanz.de.mgse.monopolyDsl.monopolyDSL.Game
import de.htwg.konstanz.de.mgse.monopolyDsl.monopolyDSL.Field
import org.eclipse.emf.common.util.EList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MonopolyDSLGenerator extends AbstractGenerator {

	val gameType = "monopoly"
	val typeClass = "FieldType"

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		val game = resource.contents.head as Game

		val fields = game.fields

		if (!fields.isEmpty) {
			// generate an Interface if there are fields
			fsa.generateFile("IField.java", generateInterface(game))

			// generate Enum class for fieldTypes
			fsa.generateFile(typeClass + ".java", generateFieldTypes(fields, game))
		}

		for (singleField : fields) {
			// create a class for each field
			val class = generateClass(singleField)
			fsa.generateFile(singleField.name + ".java", class)
		}
	}

	/**
	 * Generate field enums
	 */
	def generateFieldTypes(EList<Field> list, Game game) '''
		«createPackage(game)»
		
		
		/**
		 * These enums represent the different types of a certain field in monopoly.
		 * 
		 */
		public enum «typeClass» {
		
		«FOR field : list BEFORE "" SEPARATOR "," AFTER ""»
			/**
			 * «field.description»
			 */
			«field.name.toUpperCase»
			
		«ENDFOR»
		}
		
	'''

	def generateInterface(Game game) '''
		«createPackage(game)»
		
		«createImport(game)»
		
		
		public interface IField {
			
			/**
			 * return the position of the field
			 * @return integer 
			 */
			int getPosition();
			
			/**
			 * Return the type of this field. For example: Street, train station etc.
			 * @return enum
			 */
			«typeClass» getType();
		}
		
	'''
	
	def createImport(Game game) '''
		import de.«game.name».«gameType».«typeClass»;
	'''

	def generateClass(Field field) '''
	
	'''

	def generateFieldObject() '''
		package de.htwg.monopoly.entities.impl;
		
		import de.htwg.monopoly.entities.IFieldObject;
		import de.htwg.monopoly.util.FieldType;
		
		public class FieldObject implements IFieldObject {
		
			private final int priceToPay;
			private final FieldType type;
			private final String name;
			private final int guiPosition;
		
			/**
			 * Simple Field in Monopoly. Either Go, Prison, Go in Prison, Free Parking
			 * or a taxes.
			 * 
			 * @param name
			 * @param type
			 * @param priceToPay
			 */
			public FieldObject(String name, FieldType type, int priceToPay, int guiPosition) {
				this.priceToPay = priceToPay;
				this.type = type;
				this.name = name;
				this.guiPosition = guiPosition;
			}
		
			/**
			 * Simple Field in Monopoly. Either Go, Prison, Go in Prison, Free Parking
			 * or a taxes.
			 * 
			 * @param name
			 * @param type
			 * @param priceToPay
			 * 
			 */
			public FieldObject(String name, FieldType type, int priceToPay) {
				this(name, type, priceToPay, 0);
			}
		
		
			@Override
			public String toString() {
				return name;
			}
		
			public int getPriceToPay() {
				return priceToPay;
			}
		
			@Override
			public FieldType getType() {
				return type;
			}
		
			@Override
			public int getPosition() {
				return this.guiPosition;
			}
			
			
		
		}
	'''

	def createPackage(Game game) '''
		package de.«game.name».«gameType»;
	'''

}
